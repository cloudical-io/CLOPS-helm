# Default values for CLOPS-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Metrics-Server Config
metrics-server:
  enabled: true
  # -- Number of metrics-server replicas
  replicas: 2
  defaultArgs:
    - --cert-dir=/tmp
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --kubelet-use-node-status-port
    - --metric-resolution=15s
    # Needed. See this issue: https://github.com/kubernetes-sigs/metrics-server/issues/1221
    - --kubelet-insecure-tls
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - metrics-server
        topologyKey: kubernetes.io/hostname

# Kube-Prometheus-Stack Config
kube-prometheus-stack:
  enabled: true
  # Disable grafana, so we can deploy it by our conditions
  grafana:
    enabled: false
  # Create default rules for monitoring the cluster
  defaultRules:
    # Labels for default rules
    labels:
      role: alert-rules
  # Alertmanager Config
  alertmanager:
    # -- Enable PDB for the alertmanager
    podDisruptionBudget:
      enabled: true
    # Alertmanager ingress configuration
    ingress:
      # -- Specifies whether an ingress should be created
      enabled: true
      # -- Ingress Class Name. MAY be required for Kubernetes versions >= 1.18
      ingressClassName: nginx
      # -- Annotations for the ingress
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/tls-acme: "true"
      # -- Hosts configuration for the ingress
      hosts:
      - alertmanager.your-doma.in
      # -- TLS configuration for the ingress
      tls:
      - secretName: alertmanager-general-tls
        hosts:
          - alertmanager.your-doma.in
    alertmanagerSpec:
      # -- Number of alertmanager replicas
      replicas: 2
      # -- The external URL the Alertmanager instances will be available under
      externalUrl: https://monitoring.your-doma.in
      # -- TODO: OAUTH
      containers: []
  # KubeControllerManager Config
  kubeControllerManager:
    service:
      # -- define port
      port: 10257
      targetPort: 10257
      selector:
        component: kube-controller-manager
        tier: control-plane
    # KubeControllerManager service monitor configuration
    serviceMonitor:
      https: true
      insecureSkipVerify: true
  # KubeScheduler Config
  kubeScheduler:
    service:
      # -- define port
      port: 10259
      targetPort: 10259
    # KubeScheduler service monitor configuration
    serviceMonitor:
      https: true
      insecureSkipVerify: true
  # KubeProxy Config
  kubeProxy:
    # -- Specifies whether the kubeProxy scraping should be enabled
    enabled: false
  # Prometheus-Node-Exporter Config
  prometheus-node-exporter:
    extraArgs:
      - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      - --collector.textfile
      - --collector.textfile.directory=/var/lib/node_exporter
    extraHostVolumeMounts:
      - name: var-lib-node-exporter
        hostPath: /var/lib/node_exporter
        mountPath: /var/lib/node_exporter
        readOnly: true
  # PrometheusOperator Config
  prometheusOperator:
    admissionWebhooks:
      # -- Define failure policy
      failurePolicy: Fail
  # Prometheus Config
  prometheus:
    service:
      # targetPort: 4180 # used for OauthProxContainer (Keycloak)
      targetPort: 9090
      # -- Additional port to define in the Service
      additionalPorts:
        - name: prometheus
          port: 9191
          protocol: TCP
          targetPort: 9090
    # -- Enable PDB for prometheus
    podDisruptionBudget:
      enabled: true
    extraSecret:
      ## if not set, name will be auto generated
      name: "prometheus-basic-auth"
      data:
        # -- generated with htpasswd (PLEASE CHANGE!)
        auth: "prometheus-admin:$apr1$7qIAixeo$Rm5t1a9RQ3nWFMYCc..uW.2DfjzYZY/"
    # Prometheus ingress configuration
    ingress:
      # -- Specifies whether an ingress should be created
      enabled: true
      # -- Ingress Class Name. MAY be required for Kubernetes versions >= 1.18
      ingressClassName: nginx
      # -- Annotations for the ingress
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/tls-acme: "true"
      # -- Hosts configuration for the ingress
      hosts:
      - prometheus.your-doma.in
      # -- TLS configuration for the ingress
      tls:
      - secretName: prometheus-general-tls
        hosts:
          - prometheus.your-doma.in
    prometheusSpec:
      # -- enable --web.enable-remote-write-receiver flag on prometheus-server
      enableRemoteWriteReceiver: true
      # -- The external URL prometheus will be available under
      externalUrl: "https://prometheus.your-doma.in"
      ruleSelectorNilUsesHelmValues: false
      # -- PrometheusRules to be selected for target discovery
      ruleSelector:
        matchLabels:
          role: alert-rules
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      # -- How long to retain metrics
      retention: 7d
      ## Enable compression of the write-ahead log using Snappy
      walCompression: false
      # -- Number of prometheus replicas
      replicas: 2
      # Resource limits & requests
      resources:
        requests:
          memory: 400Mi

# Grafana Config
grafana:
  enabled: true
  # Default grafana login credentials
  adminUser: grafanaAdmin
  adminPassword: superSecretPassword
  # Grafana service monitor
  serviceMonitor:
    enabled: false
    namespace: clops-monitoring
  # Grafana ingress configuration
  ingress:
    # -- Specifies whether an ingress should be created
    enabled: true
    # -- Ingress Class Name. MAY be required for Kubernetes versions >= 1.18
    ingressClassName: nginx
    # -- Annotations for the ingress
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    # -- Hosts configuration for the ingress
    hosts:
      - grafana.your-doma.in
    # -- TLS configuration for the ingress
    tls:
    - hosts:
      - grafana.your-doma.in
      secretName: grafana-ingress-tls
  # Storage configuration
  persistence:
    # -- Specifies whether the storage should be enabled
    enabled: false
    storageClassName: rook-ceph-block
    size: 15Gi
  # Data source configuration
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        # "monitoring" should be the namespace of prometheus
        url: "http://prometheus-prometheus.monitoring.svc:9090"
        isDefault: true
      - name: Loki
        type: loki
        # "monitoring" should be the namespace of loki
        url: "http://loki.monitoring.svc:3100"
        isDefault: false

# Loki Config
loki:
  enabled: true
  # Loki Configuration
  loki:
    # -- Storage config. Providing this will automatically populate all necessary storage configs in the templated config.
    storage:
      bucketNames:
        chunks: loki-test-clops-chunks
        ruler: loki-test-clops-ruler
        admin: loki-test-clops-admin
      type: s3
      s3:
        s3: null
        endpoint: "https://loki.your-doma.in"
        region: "region-1"
        accessKeyId: "clops-test-key"
        secretAccessKey: "SUPERSECRETKEY"
      gcs:
        chunkBufferSize: 0
        requestTimeout: "0s"
        enableHttp2: true
      azure:
        accountName: null
        accountKey: null
        useManagedIdentity: false
        userAssignedId: null
        requestTimeout: null
      filesystem:
        chunks_directory: /var/loki/chunks
        rules_directory: /var/loki/rules
  # Configuration for the gateway
  gateway:
    # -- Specifies whether the gateway should be enabled
    enabled: true
    # -- Number of replicas for the gateway
    replicas: 1
    # Gateway ingress configuration
    ingress:
      # -- Specifies whether an ingress for the gateway should be created
      enabled: true
      # -- Ingress Class Name. MAY be required for Kubernetes versions >= 1.18
      ingressClassName: nginx
      # -- Annotations for the gateway ingress
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      # -- Hosts configuration for the gateway ingress
      hosts:
        - host: loki.your-doma.in
          paths:
            - path: /
              # -- pathType (e.g. ImplementationSpecific, Prefix, .. etc.) might also be required by some Ingress Controllers
              pathType: Prefix
      # -- TLS configuration for the gateway ingress
      tls:
        - secretName: loki-gateway-tls
          hosts:
            - loki.your-doma.in
    # Basic auth configuration
    basicAuth:
      # -- Enables basic authentication for the gateway
      enabled: true
      # -- The basic auth username for the gateway
      username: testloki
      # -- The basic auth password for the gateway
      password: testlokipassword
